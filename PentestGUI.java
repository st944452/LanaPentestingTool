import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.InputStreamReader;

public class PentestGUI extends JFrame {

    private JTextArea terminalOutput;
    private JTextField commandInput;
    private JTextArea automatedOutput;

    public PentestGUI() {
        // Set the title and icon
        setTitle("Pentest GUI Application");
        ImageIcon icon = new ImageIcon("path/to/icon.png");
        setIconImage(icon.getImage());

        setSize(800, 600);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // Set the dark theme
        try {
            UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
            UIManager.put("control", new Color(128, 128, 128));
            UIManager.put("info", new Color(128, 128, 128));
            UIManager.put("nimbusBase", new Color(18, 30, 49));
            UIManager.put("nimbusAlertYellow", new Color(248, 187, 0));
            UIManager.put("nimbusDisabledText", new Color(128, 128, 128));
            UIManager.put("nimbusFocus", new Color(115, 164, 209));
            UIManager.put("nimbusGreen", new Color(176, 179, 50));
            UIManager.put("nimbusInfoBlue", new Color(66, 139, 221));
            UIManager.put("nimbusLightBackground", new Color(18, 30, 49));
            UIManager.put("nimbusOrange", new Color(191, 98, 4));
            UIManager.put("nimbusRed", new Color(169, 46, 34));
            UIManager.put("nimbusSelectedText", new Color(255, 255, 255));
            UIManager.put("nimbusSelectionBackground", new Color(104, 93, 156));
            UIManager.put("text", new Color(230, 230, 230));
        } catch (Exception e) {
            e.printStackTrace();
        }

        // Create a top panel with a heading and buttons
        JPanel topPanel = new JPanel(new BorderLayout());

        // Add "LANA" heading
        JLabel headingLabel = new JLabel("LANA R", JLabel.CENTER);
        headingLabel.setFont(new Font("Arial", Font.BOLD, 24));
        headingLabel.setForeground(Color.WHITE);
        topPanel.add(headingLabel, BorderLayout.NORTH);

        // Buttons panel
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        String[] tasks = {"Nmap Scan", "Dirb Brute-force", "Task 3", "Task 4", "Task 5"};
        for (String task : tasks) {
            JButton button = new JButton(task);
            button.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    runAutomatedTaskInThread(task);
                }
            });
            buttonPanel.add(button);
        }
        topPanel.add(buttonPanel, BorderLayout.SOUTH);

        add(topPanel, BorderLayout.NORTH);

        // Create a split pane to divide terminalOutput and automatedOutput
        JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT);
        splitPane.setResizeWeight(0.5); // 50-50 split

        // Terminal Output Panel
        terminalOutput = new JTextArea();
        terminalOutput.setEditable(false);
        JScrollPane terminalScroll = new JScrollPane(terminalOutput);
        splitPane.setTopComponent(terminalScroll);

        // Automated Task Output Area
        automatedOutput = new JTextArea();
        automatedOutput.setEditable(false);
        JScrollPane automatedScroll = new JScrollPane(automatedOutput);
        splitPane.setBottomComponent(automatedScroll);

        add(splitPane, BorderLayout.CENTER);

        // Command Input
        commandInput = new JTextField();
        commandInput.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String command = commandInput.getText();
                runCommandInThread(command);
                commandInput.setText("");
            }
        });
        add(commandInput, BorderLayout.SOUTH);

        // Make the layout responsive
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                revalidate();
                repaint();
            }
        });
    }

    private void runCommandInThread(String command) {
        new Thread(() -> {
            executeCommand(command);
        }).start();
    }

    private void executeCommand(String command) {
        try {
            ProcessBuilder builder = new ProcessBuilder("bash", "-c", command);
            builder.redirectErrorStream(true);
            Process process = builder.start();
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                terminalOutput.append(line + "\n");
            }
        } catch (Exception e) {
            terminalOutput.append("Error executing command: " + e.getMessage() + "\n");
        }
    }

    private void runAutomatedTaskInThread(String task) {
        new Thread(() -> {
            runAutomatedTask(task);
        }).start();
    }

    private void runAutomatedTask(String task) {
        switch (task) {
            case "Nmap Scan":
                executeAutomatedCommand("nmap -A localhost");
                break;
            case "Dirb Brute-force":
                executeAutomatedCommand("dirb http://localhost/");
                break;
            default:
                automatedOutput.append("Task not implemented: " + task + "\n");
        }
    }

    private void executeAutomatedCommand(String command) {
        try {
            ProcessBuilder builder = new ProcessBuilder("bash", "-c", command);
            builder.redirectErrorStream(true);
            Process process = builder.start();
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                automatedOutput.append(line + "\n");
            }
        } catch (Exception e) {
            automatedOutput.append("Error executing automated task: " + e.getMessage() + "\n");
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new PentestGUI().setVisible(true);
            }
        });
    }
}